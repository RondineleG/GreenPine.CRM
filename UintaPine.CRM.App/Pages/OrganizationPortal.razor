@page "/portal/{id}"

@using UintaPine.CRM.App.Services
@using UintaPine.CRM.Model.Shared.Responses

@inject API _api
@inject AppState _appState
@inject IToastService toastService
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject NavigationManager _navigationManger


@if (Organization != null)
{
    <div class="row">
        <div class="col-md-8">
            <div class="btn-group">
                <button class="btn btn-outline-dark btn-lg dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @Organization.Name
                </button>
                <div class="dropdown-menu">
                    <NavLink class="dropdown-item pointer" href="@($"organization/{Organization.Id}/settings")">
                        <i class="fas fa-cogs mr-2"></i> Organization Settings
                    </NavLink>
                    <NavLink class="dropdown-item pointer" href="@($"organization/{Organization.Id}/fields")">
                        <i class="fas fa-cogs mr-2"></i> Organization Fields
                    </NavLink>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            @if (SelectedType != null)
            {
                <NavLink class="btn btn-success btn-lg pointer float-right" href="@($"organization/{Organization.Id}/instance/{SelectedType}")">
                    <i class="fas fa-plus mr-2"></i><span>@Types.FirstOrDefault(t => t.Id == SelectedType)?.Name</span>
                </NavLink>
            }
        </div>
        <div class="col-md-2">
            <select class="custom-select custom-select-lg float-right" @bind="SelectedType">
                <option>---Data Types---</option>
                @foreach (var type in Types)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            </select>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-md-8">
            @foreach (var tag in Organization.Tags)
            {
                <span class="badge badge-pill px-2 py-1 ml-1 float-right tag-font @($"{tag.BackgroundColor}_background") @($"{tag.FontColor}_font")">@tag.Name<i class="deleteTagButton pointer fas fa-times-circle ml-2"></i></span>
            }
        </div>
        <div class="col-md-4">
            <div class="input-group float-right">
                <input type="text" class="form-control" aria-label="Text input with dropdown button" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="SearchType"><i class="fas fa-search mr-2"></i>Search</button>
                </div>
            </div>
        </div>

    </div>

    @if (Instances.Count > 0)
    {
    <table class="table table-hover mt-3">
        <thead>
            <tr>
                @foreach (var field in Types.FirstOrDefault(t => t.Id == SelectedType)?.Fields)
                {
                    <th scope="col">@field.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var instance in Instances)
            {
                <tr>
                    @foreach (var field in instance)
                    {
                        <td>@field.Value</td>
                    }
                </tr>
            }
        </tbody>
    </table>
        }
    }

@code {

    [Parameter]
    public string Id { get; set; }

    //Loaded from API
    Organization Organization { get; set; }
    List<InstanceType> Types { get; set; } = new List<InstanceType>();
    List<Dictionary<string, string>> Instances = new List<Dictionary<string, string>>();

    //Selection
    private string SelectedType { get; set; }
    List<InstanceTag> SearchTags { get; set; } = new List<InstanceTag>();

    /// <summary>
    /// Id for local storage. Last organization loaded is stored in local storage. Will be retrieved and used if no Id is specified on the ULR parameter.
    /// </summary>
    private const string LastOrganizationLabel = "LastOrganizationLabel";

    async protected override Task OnInitializedAsync()
    {
        await LoadOrganizationData();
    }

    private async Task LoadOrganizationData()
    {
        Organization = await _api.GetOrganizationById(Id);
        await GetDataTypes();
        localStorage.SetItem(LastOrganizationLabel, Id);
    }

    async private Task GetDataTypes()
    {
        if (Id != null)
        {
            Types = await _api.GetDataTypeByOrganizationId(Id);
        }
    }

    async private Task SearchType()
    {
        Console.WriteLine("Searching...");
        Instances = await _api.SearchInstance(Id, SelectedType);
    }


    //private void SearchTagSelectedEvent(ChangeEventArgs e)
    //{
    //    string selectedTagId = e.Value.ToString();
    //    SearchTags.Add(Organization.Tags.FirstOrDefault(t => t.Id == selectedTagId));
    //}

    //private void DeleteSearchTag(CustomerTag tag)
    //{
    //    SearchTags = SearchTags.Where(t => t.Id != tag.Id).ToList();
    //}
}
