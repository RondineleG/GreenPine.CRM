@page  "/organization/{id}/settings"

@using GreenPine.CRM.App.Services
@using GreenPine.CRM.Model.Shared.Responses

@inject API _api
@inject AppState _appState
@inject IToastService toastService

@if (Organization != null)
{
    <div class="card card-body border-info text-info">
        <h5 class="card-subtitle mb-2 text-muted">
            <NavLink href="@($"portal/{Id}")">
                &lt;&lt; Back to Portal
            </NavLink>
        </h5>

        <h3 class="card-subtitle mb-2 text-muted mt-5">Organization Name</h3>
        <div class="card-text">
            <div class="col-md-6">
                <div class="row">
                    <div class="input-group input-group-lg">
                        <input type="text" class="form-control" @bind="Organization.Name" placeholder="Organization Name" aria-label="Organization Name" aria-describedby="button-addon2" />
                        <div class="input-group-append">
                            <button class="btn btn-outline-dark" type="button" id="button-addon2">Change Organization Name</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <h3 class="card-subtitle mb-2 text-muted mt-5">Manage Tags</h3>
        <p class="card-text">
            Add or Remove tags. "Tags" are synonymous to a status or folder.
        </p>
        <p class="card-text">
            <div class="col-md-6">
                <div class="input-group">
                    <input type="text" class="form-control createTagName" aria-label="New Tag Name" @bind="NewTagName" />
                    <div class="input-group-append">
                        <select @bind="NewTagBackgroundColor">
                            <option value=""></option>
                            <option value="maroon">Maroon</option>
                            <option value="red">Red</option>
                            <option value="orange">Orange</option>
                            <option value="yellow">Yellow</option>
                            <option value="olive">Olive</option>
                            <option value="green">Green</option>
                            <option value="purple">Purple</option>
                            <option value="fuchsia">Fuchsia</option>
                            <option value="lime">Lime</option>
                            <option value="teal">Teal</option>
                            <option value="aqua">Aqua</option>
                            <option value="blue">Blue</option>
                            <option value="navy">Navy</option>
                            <option value="black">Black</option>
                            <option value="gray">Gray</option>
                            <option value="silver">Silver</option>
                        </select>
                    </div>
                    <div class="input-group-append">
                        <select @bind="NewTagFontColor">
                            <option value=""></option>
                            <option value="black">Black</option>
                            <option value="white">White</option>
                        </select>
                    </div>
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="button" id="button-addon2" @onclick="CreateTag">Add Tag</button>
                    </div>
                </div>
                <span class="badge badge-pill px-2 py-1 tag-font float-right mt-1 @($"{NewTagBackgroundColor}_background") @($"{NewTagFontColor}_font")">@NewTagName</span>
            </div>
        </p>
        <p class="card-text">
            @foreach (var tag in Organization.Tags)
            {
                <span class="badge badge-pill px-2 py-1 tag-font @($"{tag.BackgroundColor}_background") @($"{tag.FontColor}_font")">@tag.Name<i @onclick="@(() => DeleteTag(tag.Id))" class="deleteTagButton pointer fas fa-times-circle ml-2"></i></span>
            }
        </p>
        <h3 class="card-subtitle mb-2 text-muted mt-5">Manage Authorized Users/Owners</h3>
        <p class="card-text">
            Add or remove users who should have access to this organization data. Add the email address of the user - be sure to spell it correctly.
        </p>
        <div class="card-text">
            <div class="col-md-6">
                <div class="row">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="NewAuthorizedUserEmail" placeholder="User's Email Address" aria-label="User's Email Address" aria-describedby="button-addon2" />
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="button" id="button-addon2" @onclick="AddAuthorizedUser">Add User</button>
                        </div>
                    </div>
                </div>
            </div>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Email Address</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Organization.Users)
                    {
                        <tr>
                            <th scope="row">@user.Email</th>
                            <td>
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="@($"authorized_{@user.Email}")" checked="@(user.Authorized ? "checked" : null )" @onchange="(() => ToggleAuthorizedRole(user))" />
                                    <label class="custom-control-label" for="@($"authorized_{@user.Email}")">Authorized</label>
                                </div>
                            </td>
                            <td>
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="@($"owner_{@user.Email}")" checked="@(user.Owner ? "checked" : null )" @onchange="(() => ToggleOwnerRole(user))" />
                                    <label class="custom-control-label" for="@($"owner_{@user.Email}")">Owner</label>
                                </div>
                            </td>
                            <td>
                                <div class="btn btn-danger" @onclick="(() => RemoveAuthorizedUser(user))"><i class="fas fa-trash-alt"></i></div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-text">
            <h3 class="card-subtitle mb-2 text-muted mt-5">Delete Organization</h3>
            <p>
                Click the button below to delete your organization. This will delete all organization data, customers, owners and authorized users. This action cannot be undone! Your account will remain active, but your organization will be deleted.
            </p>
            <div class="mt-1">
                <input type="button" class="btn btn-danger" value="Delete Organization" />
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    public Organization Organization { get; set; }

    public string NewTagName { get; set; }
    public string NewTagBackgroundColor { get; set; }
    public string NewTagFontColor { get; set; }

    public string NewAuthorizedUserEmail { get; set; }


    async protected override Task OnInitializedAsync()
    {
        Organization = await _api.GetOrganizationById(Id);
    }

    public async Task CreateTag()
    {
        if (string.IsNullOrEmpty(NewTagName))
            toastService.ShowWarning("Tag Name is Required");
        else if (string.IsNullOrEmpty(NewTagBackgroundColor))
            toastService.ShowWarning("Tag Background Color is Required");
        else if (string.IsNullOrEmpty(NewTagFontColor))
            toastService.ShowWarning("Tag Font Color is Required");
        else
        {
            InstanceTag newTag = await _api.CreateTagByOrganizationId(Organization.Id, NewTagName, NewTagBackgroundColor, NewTagFontColor);

            Organization.Tags.Add(newTag);

            NewTagName = string.Empty;
            NewTagBackgroundColor = string.Empty;
            NewTagFontColor = string.Empty;
        }
    }

    public async Task DeleteTag(string id)
    {
        await _api.DeleteTagByOrganizationIdTagId(Organization.Id, id);

        Organization.Tags = Organization.Tags.Where(t => t.Id != id).ToList();
    }

    public async Task AddAuthorizedUser()
    {
        var result = await _api.AddAuthorizedUserToOrganization(Organization.Id, NewAuthorizedUserEmail);
        if (result != null)
        {
            Organization.Users.Add(result);
            NewAuthorizedUserEmail = string.Empty;
        }
    }

    public async Task RemoveAuthorizedUser(AuthorizedUser user)
    {
        await _api.RemoveAuthorizedUserFromOrganization(Organization.Id, user.Email);
        Organization.Users = Organization.Users.Where(u => u.Email != user.Email).ToList();
    }

    public async Task ToggleAuthorizedRole(AuthorizedUser user)
    {
        //See comment in ToggleOwnerRole
        user.Authorized = !user.Authorized;
        await _api.ToggleAuthorizeRole(Organization.Id, user.Email, user.Authorized);
    }

    public async Task ToggleOwnerRole(AuthorizedUser user)
    {
        //Bit flip.  Blazor does not allow a @bind and @onchange to both exist, so we needed a work around:
        //Instead of @bind="user.Owner" and @onchange="(() => ToggleOwnerRole(user))" we are doing: 
        //checked="@(user.Authorized ? "checked" : null )" @onchange="(() => ToggleOwnerRole(user))"
        //Using @bind is preferred.  Because we can't use the @bind, we need to do the bit flip on the boolean.
        //This same logic applies to the ToggleAuthorizedRole.
        user.Owner = !user.Owner;
        await _api.ToggleOwnerRole(Organization.Id, user.Email, user.Owner);
    }


}
