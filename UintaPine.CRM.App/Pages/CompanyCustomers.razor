@page "/company/{id}"

@using UintaPine.CRM.App.Services
@using UintaPine.CRM.Model.Shared.Responses

@inject API _api
@inject AppState _appState
@inject IToastService toastService
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject NavigationManager _navigationManger


@if (Company != null)
{
    <div class="btn-group">
        <button class="btn btn-outline-dark btn-lg dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @Company.Name
        </button>
        <div class="dropdown-menu">
            <NavLink class="dropdown-item pointer" href="@($"company/{Company.Id}/settings")">
                Company Settings
            </NavLink>
            <NavLink class="dropdown-item pointer" href="company/create">
                Create New Company
            </NavLink>
        </div>
    </div>
    <NavLink class="btn btn-success btn-lg pointer" href="customer/create">
        <i class="fas fa-plus mr-2"></i><span>Customer</span>
    </NavLink>
    <div class="row mt-2">
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" aria-label="Text input with dropdown button" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button">Search</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="row">
                @foreach (var tag in Company.Tags)
                {
                    <span class="badge badge-pill px-2 py-1 tag-font @($"{tag.BackgroundColor}_background") @($"{tag.FontColor}_font")">@tag.Name<i @onclick="@(() => DeleteSearchTag(tag))" class="deleteTagButton pointer fas fa-times-circle ml-2"></i></span>
                }
            </div>
        </div>
    </div>






    <table class="table table-hover mt-3">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">First</th>
                <th scope="col">Last</th>
                <th scope="col">Handle</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">1</th>
                <td>Mark</td>
                <td>Otto</td>
                <td>@@mdo</td>
            </tr>
            <tr>
                <th scope="row">2</th>
                <td>Jacob</td>
                <td>Thornton</td>
                <td>@@fat</td>
            </tr>
            <tr>
                <th scope="row">3</th>
                <td colspan="2">Larry the Bird</td>
                <td>@@twitter</td>
            </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Id { get; set; }

    Company Company { get; set; }
    List<CustomerTag> SearchTags { get; set; } = new List<CustomerTag>();

    async protected override Task OnInitializedAsync()
    {
        Company = await _api.GetCompanyById(Id);
    }

    private void SearchTagSelectedEvent(ChangeEventArgs e)
    {
        string selectedTagId = e.Value.ToString();
        SearchTags.Add(Company.Tags.FirstOrDefault(t => t.Id == selectedTagId));
    }

    private void DeleteSearchTag(CustomerTag tag)
    {
        SearchTags = SearchTags.Where(t => t.Id != tag.Id).ToList();
    }
}
