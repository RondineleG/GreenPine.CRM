@page "/organization/{OrganizationId}/instance/{DataTypeId}"
@using UintaPine.CRM.App.Services
@using UintaPine.CRM.Model.Shared.Responses

@inject API _api

<h3>Instance Create</h3>
<h5>@DataTypeId</h5>


@if (Type != null)
{
    <div class="row">
        <div class="col-md-12">
            <h3>@Type.Name</h3>
        </div>
    </div>

    <form @onsubmit="SaveInstance">
        @for (int row = 1; row <= Type.Fields.Select(f => f.Row).Max(); row++)
        {
        <div class="row">
            @for (int col = 1; col <= 12; col++)
            {
                foreach (var field in Type.Fields.Where(f => f.Row == row && f.Column == col))
                {
                    @if (field.Type == Model.Shared.Enumerations.FieldType.Text)
                    {
                        <div class="form-group col-md-@(field.Column + (field.ColumnSpan - 1))">
                            <label for="@field.Id">@field.Name</label>
                            <input id="@field.Id" type="text" class="form-control" required="@(field.Optional == false ? "required" : string.Empty)" @bind="Instance[field.Id]" />
                        </div>
                    }
                    else if (field.Type == Model.Shared.Enumerations.FieldType.TextArea)
                    {
                        <div class="form-group col-md-@(field.Column + (field.ColumnSpan - 1))">
                            <label for="@field.Id">@field.Name</label>
                            <textarea id="@field.Id" class="form-control" required="@(field.Optional == false ? "required" : string.Empty)" @bind="Instance[field.Id]" ></textarea>
                        </div>
                    }
                    else if (field.Type == Model.Shared.Enumerations.FieldType.Number)
                    {
                        <div class="form-group col-md-@(field.Column + (field.ColumnSpan - 1))">
                            <label for="@field.Id">@field.Name</label>
                            <input id="@field.Id" type="number" class="form-control" required="@(field.Optional == false ? "required" : string.Empty)" @bind="Instance[field.Id]" />
                        </div>
                    }
                    else if (field.Type == Model.Shared.Enumerations.FieldType.Date)
                    {
                        <div class="form-group col-md-@(field.Column + (field.ColumnSpan - 1))">
                            <label for="@field.Id">@field.Name</label>
                            <input id="@field.Id" type="text" class="form-control" required="@(field.Optional == false ? "required" : string.Empty)" @bind="Instance[field.Id]" />
                        </div>
                    }
                    else if (field.Type == Model.Shared.Enumerations.FieldType.Time)
                    {
                        <div class="form-group col-md-@(field.Column + (field.ColumnSpan - 1))">
                            <label for="@field.Id">@field.Name</label>
                            <input id="@field.Id" type="text" class="form-control" required="@(field.Optional == false ? "required" : string.Empty)" @bind="Instance[field.Id]" />
                        </div>
                    }
                    else if (field.Type == Model.Shared.Enumerations.FieldType.Boolean)
                    {
                        <div class="form-check col-md-@(field.Column + (field.ColumnSpan - 1))">
                            <input class="form-check-input" type="checkbox" value="" id="@field.Id" @bind="Instance[field.Id]" />
                            <label class="form-check-label" for="defaultCheck1">
                                @field.Name
                            </label>
                        </div>
                    }
                    else if (field.Type == Model.Shared.Enumerations.FieldType.Enum)
                    {
                        <div class="form-group col-md-@(field.Column + (field.ColumnSpan - 1))">
                            <label for="@field.Id">@field.Name</label>
                            <select class="form-control" required="@(field.Optional == false ? "required" : string.Empty)" @bind="Instance[field.Id]">
                                @foreach (var option in field.Options.Split(','))
                                {
                                    <option value="@option">@option</option>
                                }
                            </select>
                        </div>
                    }

                }
            }
        </div>
        }
        <button class="btn btn-primary" type="submit">Save @Type.Name</button>
    </form>
}

@code {
    [Parameter]
    public string OrganizationId { get; set; }

    [Parameter]
    public string DataTypeId { get; set; } //If Id=="Create", then do not get the customer details

    //Loaded from API
    public Organization Organization { get; set; } = new Organization();
    public InstanceType Type { get; set; }

    public Dictionary<string, string> Instance { get; set; } = new Dictionary<string, string>();

    async protected override Task OnInitializedAsync()
    {
        await GetOrganization();
        await GetDataTypes();
    }

    async private Task GetOrganization()
    {
        Organization = await _api.GetOrganizationById(OrganizationId);
    }

    async private Task GetDataTypes()
    {
        Type = await _api.GetDataTypeByOrganizationIdTypeId(OrganizationId, DataTypeId);

        foreach(var t in Type.Fields)
        {
            Instance.Add(t.Id, string.Empty);
        }
    }

    async private Task SaveInstance()
    {
        var obj = Newtonsoft.Json.JsonConvert.SerializeObject(Instance);
        Console.WriteLine(obj);

        await _api.CreateInstance(OrganizationId, DataTypeId, Instance);
    }
}
