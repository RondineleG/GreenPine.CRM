@inherits LayoutComponentBase

@using Blazored.Toast.Configuration
@using app.UintaPine.Services
@using model.Shared.UintaPine

@inject AppState _appState
@inject API _api
@inject NavigationManager _navigationManager

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="10"
                SuccessClass="success-toast-override"
                SuccessIconClass="fa fa-thumbs-up"
                ErrorIconClass="fa fa-bug" />

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <NavLink class="navbar-brand nav-link" href="/">
        <i class="fas fa-tree mr-1"></i> <span>Uinta Pine</span>
    </NavLink>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarText">
        <ul class="navbar-nav mr-auto">
        </ul>
        @if (_appState.IsInitialized == true)
        {
            @if (_appState?.User != null)
            {
                <span class="navbar-text">
                    <NavLink class="nav-link" href="" @onclick="SignOut">
                        @_appState.User.Email | Sign Out <i class="fas fa-sign-out-alt"></i>
                    </NavLink>
                </span>
            }
            else
            {
                <span class="navbar-text">
                    <NavLink class="nav-link" href="account">
                        Register/Sign In
                    </NavLink>
                </span>
            }
        }
    </div>
</nav>

<div class="content px-4 py-3">
    @Body
</div>

@code {

    protected override void OnInitialized()
    {
        _appState.OnChange += StateHasChanged;
    }

    async protected override Task OnInitializedAsync()
    {
        UserSlim user = await _api.GetUserCurrent();
        if (user?.Success == true)
        {
            _appState.User = user;
        }
        _appState.IsInitialized = true;
    }

    async public Task SignOut()
    {
        await _api.Logout();
        _appState.User = null;

        _navigationManager.NavigateTo("account");
    }
}